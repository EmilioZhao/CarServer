// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

#ifndef PROTOBUF_INCLUDED_light_2eproto
#define PROTOBUF_INCLUDED_light_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_light_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_light_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_light_2eproto();
namespace zzy {
namespace car {
class Perception;
class PerceptionDefaultTypeInternal;
extern PerceptionDefaultTypeInternal _Perception_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Response_Command;
class Response_CommandDefaultTypeInternal;
extern Response_CommandDefaultTypeInternal _Response_Command_default_instance_;
}  // namespace car
}  // namespace zzy
namespace google {
namespace protobuf {
template<> ::zzy::car::Perception* Arena::CreateMaybeMessage<::zzy::car::Perception>(Arena*);
template<> ::zzy::car::Request* Arena::CreateMaybeMessage<::zzy::car::Request>(Arena*);
template<> ::zzy::car::Response* Arena::CreateMaybeMessage<::zzy::car::Response>(Arena*);
template<> ::zzy::car::Response_Command* Arena::CreateMaybeMessage<::zzy::car::Response_Command>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace zzy {
namespace car {

enum Perception_LightType {
  Perception_LightType_CAR_LIGHT = 0,
  Perception_LightType_TRAFFIC_LIGHT = 1
};
bool Perception_LightType_IsValid(int value);
const Perception_LightType Perception_LightType_LightType_MIN = Perception_LightType_CAR_LIGHT;
const Perception_LightType Perception_LightType_LightType_MAX = Perception_LightType_TRAFFIC_LIGHT;
const int Perception_LightType_LightType_ARRAYSIZE = Perception_LightType_LightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Perception_LightType_descriptor();
inline const ::std::string& Perception_LightType_Name(Perception_LightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Perception_LightType_descriptor(), value);
}
inline bool Perception_LightType_Parse(
    const ::std::string& name, Perception_LightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Perception_LightType>(
    Perception_LightType_descriptor(), name, value);
}
enum Perception_CarLightType {
  Perception_CarLightType_TURN_LEFT = 0,
  Perception_CarLightType_TURN_RIGHT = 1,
  Perception_CarLightType_STOP = 2,
  Perception_CarLightType_URGENT = 3,
  Perception_CarLightType_NO_LIGHT = 4
};
bool Perception_CarLightType_IsValid(int value);
const Perception_CarLightType Perception_CarLightType_CarLightType_MIN = Perception_CarLightType_TURN_LEFT;
const Perception_CarLightType Perception_CarLightType_CarLightType_MAX = Perception_CarLightType_NO_LIGHT;
const int Perception_CarLightType_CarLightType_ARRAYSIZE = Perception_CarLightType_CarLightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Perception_CarLightType_descriptor();
inline const ::std::string& Perception_CarLightType_Name(Perception_CarLightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Perception_CarLightType_descriptor(), value);
}
inline bool Perception_CarLightType_Parse(
    const ::std::string& name, Perception_CarLightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Perception_CarLightType>(
    Perception_CarLightType_descriptor(), name, value);
}
enum Perception_TrafficLightType {
  Perception_TrafficLightType_RED_FORWARD = 0,
  Perception_TrafficLightType_RED_LEFT = 1,
  Perception_TrafficLightType_RED_RIGHT = 2,
  Perception_TrafficLightType_YELLOW_FORWARD = 3,
  Perception_TrafficLightType_YELLOW_LEFT = 4,
  Perception_TrafficLightType_YELLOW_RIGHT = 5,
  Perception_TrafficLightType_GREEN_FORWARD = 6,
  Perception_TrafficLightType_GREEN_LEFT = 7,
  Perception_TrafficLightType_GREEN_RIGHT = 8,
  Perception_TrafficLightType_BLACK_FORWARD = 9,
  Perception_TrafficLightType_BLACK_LEFT = 10,
  Perception_TrafficLightType_BLACK_RIGHT = 11,
  Perception_TrafficLightType_UNKNOWN_FORWARD = 12,
  Perception_TrafficLightType_UNKNOWN_LEFT = 13,
  Perception_TrafficLightType_UNKNOWN_RIGHT = 14
};
bool Perception_TrafficLightType_IsValid(int value);
const Perception_TrafficLightType Perception_TrafficLightType_TrafficLightType_MIN = Perception_TrafficLightType_RED_FORWARD;
const Perception_TrafficLightType Perception_TrafficLightType_TrafficLightType_MAX = Perception_TrafficLightType_UNKNOWN_RIGHT;
const int Perception_TrafficLightType_TrafficLightType_ARRAYSIZE = Perception_TrafficLightType_TrafficLightType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Perception_TrafficLightType_descriptor();
inline const ::std::string& Perception_TrafficLightType_Name(Perception_TrafficLightType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Perception_TrafficLightType_descriptor(), value);
}
inline bool Perception_TrafficLightType_Parse(
    const ::std::string& name, Perception_TrafficLightType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Perception_TrafficLightType>(
    Perception_TrafficLightType_descriptor(), name, value);
}
enum Response_Action {
  Response_Action_NO_ACTION = 0,
  Response_Action_SPEED_UP = 1,
  Response_Action_SLOW_DOWN = 2
};
bool Response_Action_IsValid(int value);
const Response_Action Response_Action_Action_MIN = Response_Action_NO_ACTION;
const Response_Action Response_Action_Action_MAX = Response_Action_SLOW_DOWN;
const int Response_Action_Action_ARRAYSIZE = Response_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_Action_descriptor();
inline const ::std::string& Response_Action_Name(Response_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_Action_descriptor(), value);
}
inline bool Response_Action_Parse(
    const ::std::string& name, Response_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_Action>(
    Response_Action_descriptor(), name, value);
}
// ===================================================================

class Perception final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zzy.car.Perception) */ {
 public:
  Perception();
  virtual ~Perception();

  Perception(const Perception& from);

  inline Perception& operator=(const Perception& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Perception(Perception&& from) noexcept
    : Perception() {
    *this = ::std::move(from);
  }

  inline Perception& operator=(Perception&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Perception& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Perception* internal_default_instance() {
    return reinterpret_cast<const Perception*>(
               &_Perception_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Perception* other);
  friend void swap(Perception& a, Perception& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Perception* New() const final {
    return CreateMaybeMessage<Perception>(nullptr);
  }

  Perception* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Perception>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Perception& from);
  void MergeFrom(const Perception& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Perception* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Perception_LightType LightType;
  static const LightType CAR_LIGHT =
    Perception_LightType_CAR_LIGHT;
  static const LightType TRAFFIC_LIGHT =
    Perception_LightType_TRAFFIC_LIGHT;
  static inline bool LightType_IsValid(int value) {
    return Perception_LightType_IsValid(value);
  }
  static const LightType LightType_MIN =
    Perception_LightType_LightType_MIN;
  static const LightType LightType_MAX =
    Perception_LightType_LightType_MAX;
  static const int LightType_ARRAYSIZE =
    Perception_LightType_LightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LightType_descriptor() {
    return Perception_LightType_descriptor();
  }
  static inline const ::std::string& LightType_Name(LightType value) {
    return Perception_LightType_Name(value);
  }
  static inline bool LightType_Parse(const ::std::string& name,
      LightType* value) {
    return Perception_LightType_Parse(name, value);
  }

  typedef Perception_CarLightType CarLightType;
  static const CarLightType TURN_LEFT =
    Perception_CarLightType_TURN_LEFT;
  static const CarLightType TURN_RIGHT =
    Perception_CarLightType_TURN_RIGHT;
  static const CarLightType STOP =
    Perception_CarLightType_STOP;
  static const CarLightType URGENT =
    Perception_CarLightType_URGENT;
  static const CarLightType NO_LIGHT =
    Perception_CarLightType_NO_LIGHT;
  static inline bool CarLightType_IsValid(int value) {
    return Perception_CarLightType_IsValid(value);
  }
  static const CarLightType CarLightType_MIN =
    Perception_CarLightType_CarLightType_MIN;
  static const CarLightType CarLightType_MAX =
    Perception_CarLightType_CarLightType_MAX;
  static const int CarLightType_ARRAYSIZE =
    Perception_CarLightType_CarLightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CarLightType_descriptor() {
    return Perception_CarLightType_descriptor();
  }
  static inline const ::std::string& CarLightType_Name(CarLightType value) {
    return Perception_CarLightType_Name(value);
  }
  static inline bool CarLightType_Parse(const ::std::string& name,
      CarLightType* value) {
    return Perception_CarLightType_Parse(name, value);
  }

  typedef Perception_TrafficLightType TrafficLightType;
  static const TrafficLightType RED_FORWARD =
    Perception_TrafficLightType_RED_FORWARD;
  static const TrafficLightType RED_LEFT =
    Perception_TrafficLightType_RED_LEFT;
  static const TrafficLightType RED_RIGHT =
    Perception_TrafficLightType_RED_RIGHT;
  static const TrafficLightType YELLOW_FORWARD =
    Perception_TrafficLightType_YELLOW_FORWARD;
  static const TrafficLightType YELLOW_LEFT =
    Perception_TrafficLightType_YELLOW_LEFT;
  static const TrafficLightType YELLOW_RIGHT =
    Perception_TrafficLightType_YELLOW_RIGHT;
  static const TrafficLightType GREEN_FORWARD =
    Perception_TrafficLightType_GREEN_FORWARD;
  static const TrafficLightType GREEN_LEFT =
    Perception_TrafficLightType_GREEN_LEFT;
  static const TrafficLightType GREEN_RIGHT =
    Perception_TrafficLightType_GREEN_RIGHT;
  static const TrafficLightType BLACK_FORWARD =
    Perception_TrafficLightType_BLACK_FORWARD;
  static const TrafficLightType BLACK_LEFT =
    Perception_TrafficLightType_BLACK_LEFT;
  static const TrafficLightType BLACK_RIGHT =
    Perception_TrafficLightType_BLACK_RIGHT;
  static const TrafficLightType UNKNOWN_FORWARD =
    Perception_TrafficLightType_UNKNOWN_FORWARD;
  static const TrafficLightType UNKNOWN_LEFT =
    Perception_TrafficLightType_UNKNOWN_LEFT;
  static const TrafficLightType UNKNOWN_RIGHT =
    Perception_TrafficLightType_UNKNOWN_RIGHT;
  static inline bool TrafficLightType_IsValid(int value) {
    return Perception_TrafficLightType_IsValid(value);
  }
  static const TrafficLightType TrafficLightType_MIN =
    Perception_TrafficLightType_TrafficLightType_MIN;
  static const TrafficLightType TrafficLightType_MAX =
    Perception_TrafficLightType_TrafficLightType_MAX;
  static const int TrafficLightType_ARRAYSIZE =
    Perception_TrafficLightType_TrafficLightType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TrafficLightType_descriptor() {
    return Perception_TrafficLightType_descriptor();
  }
  static inline const ::std::string& TrafficLightType_Name(TrafficLightType value) {
    return Perception_TrafficLightType_Name(value);
  }
  static inline bool TrafficLightType_Parse(const ::std::string& name,
      TrafficLightType* value) {
    return Perception_TrafficLightType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .zzy.car.Perception.LightType light_type = 1;
  bool has_light_type() const;
  void clear_light_type();
  static const int kLightTypeFieldNumber = 1;
  ::zzy::car::Perception_LightType light_type() const;
  void set_light_type(::zzy::car::Perception_LightType value);

  // optional .zzy.car.Perception.CarLightType car_light_type = 2;
  bool has_car_light_type() const;
  void clear_car_light_type();
  static const int kCarLightTypeFieldNumber = 2;
  ::zzy::car::Perception_CarLightType car_light_type() const;
  void set_car_light_type(::zzy::car::Perception_CarLightType value);

  // optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
  bool has_traffic_light_type() const;
  void clear_traffic_light_type();
  static const int kTrafficLightTypeFieldNumber = 3;
  ::zzy::car::Perception_TrafficLightType traffic_light_type() const;
  void set_traffic_light_type(::zzy::car::Perception_TrafficLightType value);

  // optional float distance = 4;
  bool has_distance() const;
  void clear_distance();
  static const int kDistanceFieldNumber = 4;
  float distance() const;
  void set_distance(float value);

  // optional float object_speed = 5;
  bool has_object_speed() const;
  void clear_object_speed();
  static const int kObjectSpeedFieldNumber = 5;
  float object_speed() const;
  void set_object_speed(float value);

  // @@protoc_insertion_point(class_scope:zzy.car.Perception)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int light_type_;
  int car_light_type_;
  int traffic_light_type_;
  float distance_;
  float object_speed_;
  friend struct ::TableStruct_light_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zzy.car.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zzy.car.Perception perception = 3;
  bool has_perception() const;
  void clear_perception();
  static const int kPerceptionFieldNumber = 3;
  const ::zzy::car::Perception& perception() const;
  ::zzy::car::Perception* release_perception();
  ::zzy::car::Perception* mutable_perception();
  void set_allocated_perception(::zzy::car::Perception* perception);

  // required int64 vehicle_id = 1;
  bool has_vehicle_id() const;
  void clear_vehicle_id();
  static const int kVehicleIdFieldNumber = 1;
  ::google::protobuf::int64 vehicle_id() const;
  void set_vehicle_id(::google::protobuf::int64 value);

  // optional int32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:zzy.car.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zzy::car::Perception* perception_;
  ::google::protobuf::int64 vehicle_id_;
  ::google::protobuf::int32 timestamp_;
  friend struct ::TableStruct_light_2eproto;
};
// -------------------------------------------------------------------

class Response_Command final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zzy.car.Response.Command) */ {
 public:
  Response_Command();
  virtual ~Response_Command();

  Response_Command(const Response_Command& from);

  inline Response_Command& operator=(const Response_Command& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response_Command(Response_Command&& from) noexcept
    : Response_Command() {
    *this = ::std::move(from);
  }

  inline Response_Command& operator=(Response_Command&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response_Command& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response_Command* internal_default_instance() {
    return reinterpret_cast<const Response_Command*>(
               &_Response_Command_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Response_Command* other);
  friend void swap(Response_Command& a, Response_Command& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response_Command* New() const final {
    return CreateMaybeMessage<Response_Command>(nullptr);
  }

  Response_Command* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response_Command>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response_Command& from);
  void MergeFrom(const Response_Command& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response_Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .zzy.car.Response.Action action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::zzy::car::Response_Action action() const;
  void set_action(::zzy::car::Response_Action value);

  // optional float target_speed = 2;
  bool has_target_speed() const;
  void clear_target_speed();
  static const int kTargetSpeedFieldNumber = 2;
  float target_speed() const;
  void set_target_speed(float value);

  // optional double acceleration = 3;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 3;
  double acceleration() const;
  void set_acceleration(double value);

  // @@protoc_insertion_point(class_scope:zzy.car.Response.Command)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int action_;
  float target_speed_;
  double acceleration_;
  friend struct ::TableStruct_light_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zzy.car.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Response_Command Command;

  typedef Response_Action Action;
  static const Action NO_ACTION =
    Response_Action_NO_ACTION;
  static const Action SPEED_UP =
    Response_Action_SPEED_UP;
  static const Action SLOW_DOWN =
    Response_Action_SLOW_DOWN;
  static inline bool Action_IsValid(int value) {
    return Response_Action_IsValid(value);
  }
  static const Action Action_MIN =
    Response_Action_Action_MIN;
  static const Action Action_MAX =
    Response_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    Response_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return Response_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return Response_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return Response_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .zzy.car.Response.Command command = 1;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::zzy::car::Response_Command& command() const;
  ::zzy::car::Response_Command* release_command();
  ::zzy::car::Response_Command* mutable_command();
  void set_allocated_command(::zzy::car::Response_Command* command);

  // optional int64 vehicle_id = 3;
  bool has_vehicle_id() const;
  void clear_vehicle_id();
  static const int kVehicleIdFieldNumber = 3;
  ::google::protobuf::int64 vehicle_id() const;
  void set_vehicle_id(::google::protobuf::int64 value);

  // optional uint32 timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::uint32 timestamp() const;
  void set_timestamp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:zzy.car.Response)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::zzy::car::Response_Command* command_;
  ::google::protobuf::int64 vehicle_id_;
  ::google::protobuf::uint32 timestamp_;
  friend struct ::TableStruct_light_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Perception

// optional .zzy.car.Perception.LightType light_type = 1;
inline bool Perception::has_light_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Perception::clear_light_type() {
  light_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::zzy::car::Perception_LightType Perception::light_type() const {
  // @@protoc_insertion_point(field_get:zzy.car.Perception.light_type)
  return static_cast< ::zzy::car::Perception_LightType >(light_type_);
}
inline void Perception::set_light_type(::zzy::car::Perception_LightType value) {
  assert(::zzy::car::Perception_LightType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  light_type_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Perception.light_type)
}

// optional .zzy.car.Perception.CarLightType car_light_type = 2;
inline bool Perception::has_car_light_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Perception::clear_car_light_type() {
  car_light_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::zzy::car::Perception_CarLightType Perception::car_light_type() const {
  // @@protoc_insertion_point(field_get:zzy.car.Perception.car_light_type)
  return static_cast< ::zzy::car::Perception_CarLightType >(car_light_type_);
}
inline void Perception::set_car_light_type(::zzy::car::Perception_CarLightType value) {
  assert(::zzy::car::Perception_CarLightType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  car_light_type_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Perception.car_light_type)
}

// optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
inline bool Perception::has_traffic_light_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Perception::clear_traffic_light_type() {
  traffic_light_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::zzy::car::Perception_TrafficLightType Perception::traffic_light_type() const {
  // @@protoc_insertion_point(field_get:zzy.car.Perception.traffic_light_type)
  return static_cast< ::zzy::car::Perception_TrafficLightType >(traffic_light_type_);
}
inline void Perception::set_traffic_light_type(::zzy::car::Perception_TrafficLightType value) {
  assert(::zzy::car::Perception_TrafficLightType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  traffic_light_type_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Perception.traffic_light_type)
}

// optional float distance = 4;
inline bool Perception::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Perception::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Perception::distance() const {
  // @@protoc_insertion_point(field_get:zzy.car.Perception.distance)
  return distance_;
}
inline void Perception::set_distance(float value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Perception.distance)
}

// optional float object_speed = 5;
inline bool Perception::has_object_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Perception::clear_object_speed() {
  object_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Perception::object_speed() const {
  // @@protoc_insertion_point(field_get:zzy.car.Perception.object_speed)
  return object_speed_;
}
inline void Perception::set_object_speed(float value) {
  _has_bits_[0] |= 0x00000010u;
  object_speed_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Perception.object_speed)
}

// -------------------------------------------------------------------

// Request

// required int64 vehicle_id = 1;
inline bool Request::has_vehicle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::clear_vehicle_id() {
  vehicle_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int64 Request::vehicle_id() const {
  // @@protoc_insertion_point(field_get:zzy.car.Request.vehicle_id)
  return vehicle_id_;
}
inline void Request::set_vehicle_id(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_id_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Request.vehicle_id)
}

// optional int32 timestamp = 2;
inline bool Request::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Request::timestamp() const {
  // @@protoc_insertion_point(field_get:zzy.car.Request.timestamp)
  return timestamp_;
}
inline void Request::set_timestamp(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Request.timestamp)
}

// optional .zzy.car.Perception perception = 3;
inline bool Request::has_perception() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::clear_perception() {
  if (perception_ != nullptr) perception_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zzy::car::Perception& Request::perception() const {
  const ::zzy::car::Perception* p = perception_;
  // @@protoc_insertion_point(field_get:zzy.car.Request.perception)
  return p != nullptr ? *p : *reinterpret_cast<const ::zzy::car::Perception*>(
      &::zzy::car::_Perception_default_instance_);
}
inline ::zzy::car::Perception* Request::release_perception() {
  // @@protoc_insertion_point(field_release:zzy.car.Request.perception)
  _has_bits_[0] &= ~0x00000001u;
  ::zzy::car::Perception* temp = perception_;
  perception_ = nullptr;
  return temp;
}
inline ::zzy::car::Perception* Request::mutable_perception() {
  _has_bits_[0] |= 0x00000001u;
  if (perception_ == nullptr) {
    auto* p = CreateMaybeMessage<::zzy::car::Perception>(GetArenaNoVirtual());
    perception_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zzy.car.Request.perception)
  return perception_;
}
inline void Request::set_allocated_perception(::zzy::car::Perception* perception) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete perception_;
  }
  if (perception) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      perception = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, perception, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  perception_ = perception;
  // @@protoc_insertion_point(field_set_allocated:zzy.car.Request.perception)
}

// -------------------------------------------------------------------

// Response_Command

// optional .zzy.car.Response.Action action = 1;
inline bool Response_Command::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_Command::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::zzy::car::Response_Action Response_Command::action() const {
  // @@protoc_insertion_point(field_get:zzy.car.Response.Command.action)
  return static_cast< ::zzy::car::Response_Action >(action_);
}
inline void Response_Command::set_action(::zzy::car::Response_Action value) {
  assert(::zzy::car::Response_Action_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  action_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Response.Command.action)
}

// optional float target_speed = 2;
inline bool Response_Command::has_target_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_Command::clear_target_speed() {
  target_speed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Response_Command::target_speed() const {
  // @@protoc_insertion_point(field_get:zzy.car.Response.Command.target_speed)
  return target_speed_;
}
inline void Response_Command::set_target_speed(float value) {
  _has_bits_[0] |= 0x00000002u;
  target_speed_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Response.Command.target_speed)
}

// optional double acceleration = 3;
inline bool Response_Command::has_acceleration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response_Command::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Response_Command::acceleration() const {
  // @@protoc_insertion_point(field_get:zzy.car.Response.Command.acceleration)
  return acceleration_;
}
inline void Response_Command::set_acceleration(double value) {
  _has_bits_[0] |= 0x00000004u;
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Response.Command.acceleration)
}

// -------------------------------------------------------------------

// Response

// required .zzy.car.Response.Command command = 1;
inline bool Response::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::clear_command() {
  if (command_ != nullptr) command_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::zzy::car::Response_Command& Response::command() const {
  const ::zzy::car::Response_Command* p = command_;
  // @@protoc_insertion_point(field_get:zzy.car.Response.command)
  return p != nullptr ? *p : *reinterpret_cast<const ::zzy::car::Response_Command*>(
      &::zzy::car::_Response_Command_default_instance_);
}
inline ::zzy::car::Response_Command* Response::release_command() {
  // @@protoc_insertion_point(field_release:zzy.car.Response.command)
  _has_bits_[0] &= ~0x00000001u;
  ::zzy::car::Response_Command* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::zzy::car::Response_Command* Response::mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::zzy::car::Response_Command>(GetArenaNoVirtual());
    command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:zzy.car.Response.command)
  return command_;
}
inline void Response::set_allocated_command(::zzy::car::Response_Command* command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:zzy.car.Response.command)
}

// optional uint32 timestamp = 2;
inline bool Response::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::clear_timestamp() {
  timestamp_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 Response::timestamp() const {
  // @@protoc_insertion_point(field_get:zzy.car.Response.timestamp)
  return timestamp_;
}
inline void Response::set_timestamp(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Response.timestamp)
}

// optional int64 vehicle_id = 3;
inline bool Response::has_vehicle_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::clear_vehicle_id() {
  vehicle_id_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int64 Response::vehicle_id() const {
  // @@protoc_insertion_point(field_get:zzy.car.Response.vehicle_id)
  return vehicle_id_;
}
inline void Response::set_vehicle_id(::google::protobuf::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  vehicle_id_ = value;
  // @@protoc_insertion_point(field_set:zzy.car.Response.vehicle_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace car
}  // namespace zzy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::zzy::car::Perception_LightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zzy::car::Perception_LightType>() {
  return ::zzy::car::Perception_LightType_descriptor();
}
template <> struct is_proto_enum< ::zzy::car::Perception_CarLightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zzy::car::Perception_CarLightType>() {
  return ::zzy::car::Perception_CarLightType_descriptor();
}
template <> struct is_proto_enum< ::zzy::car::Perception_TrafficLightType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zzy::car::Perception_TrafficLightType>() {
  return ::zzy::car::Perception_TrafficLightType_descriptor();
}
template <> struct is_proto_enum< ::zzy::car::Response_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::zzy::car::Response_Action>() {
  return ::zzy::car::Response_Action_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_light_2eproto
