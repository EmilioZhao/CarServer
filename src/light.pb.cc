// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

#include "light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_light_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Perception_light_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_light_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Response_Command_light_2eproto;
namespace zzy {
namespace car {
class PerceptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Perception> _instance;
} _Perception_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Request> _instance;
} _Request_default_instance_;
class Response_CommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response_Command> _instance;
} _Response_Command_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
}  // namespace car
}  // namespace zzy
static void InitDefaultsPerception_light_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zzy::car::_Perception_default_instance_;
    new (ptr) ::zzy::car::Perception();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zzy::car::Perception::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Perception_light_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPerception_light_2eproto}, {}};

static void InitDefaultsRequest_light_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zzy::car::_Request_default_instance_;
    new (ptr) ::zzy::car::Request();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zzy::car::Request::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Request_light_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRequest_light_2eproto}, {
      &scc_info_Perception_light_2eproto.base,}};

static void InitDefaultsResponse_Command_light_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zzy::car::_Response_Command_default_instance_;
    new (ptr) ::zzy::car::Response_Command();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zzy::car::Response_Command::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Response_Command_light_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsResponse_Command_light_2eproto}, {}};

static void InitDefaultsResponse_light_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zzy::car::_Response_default_instance_;
    new (ptr) ::zzy::car::Response();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zzy::car::Response::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Response_light_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsResponse_light_2eproto}, {
      &scc_info_Response_Command_light_2eproto.base,}};

void InitDefaults_light_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Perception_light_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Request_light_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_Command_light_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Response_light_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_light_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_light_2eproto[4];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_light_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_light_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, light_type_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, car_light_type_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, traffic_light_type_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, distance_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Perception, object_speed_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::zzy::car::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zzy::car::Request, vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Request, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Request, perception_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response_Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response_Command, action_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response_Command, target_speed_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response_Command, acceleration_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response, command_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response, timestamp_),
  PROTOBUF_FIELD_OFFSET(::zzy::car::Response, vehicle_id_),
  0,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::zzy::car::Perception)},
  { 15, 23, sizeof(::zzy::car::Request)},
  { 26, 34, sizeof(::zzy::car::Response_Command)},
  { 37, 45, sizeof(::zzy::car::Response)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::zzy::car::_Perception_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zzy::car::_Request_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zzy::car::_Response_Command_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::zzy::car::_Response_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_light_2eproto = {
  {}, AddDescriptors_light_2eproto, "light.proto", schemas,
  file_default_instances, TableStruct_light_2eproto::offsets,
  file_level_metadata_light_2eproto, 4, file_level_enum_descriptors_light_2eproto, file_level_service_descriptors_light_2eproto,
};

const char descriptor_table_protodef_light_2eproto[] =
  "\n\013light.proto\022\007zzy.car\"\201\005\n\nPerception\0221\n"
  "\nlight_type\030\001 \001(\0162\035.zzy.car.Perception.L"
  "ightType\0228\n\016car_light_type\030\002 \001(\0162 .zzy.c"
  "ar.Perception.CarLightType\022@\n\022traffic_li"
  "ght_type\030\003 \001(\0162$.zzy.car.Perception.Traf"
  "ficLightType\022\020\n\010distance\030\004 \001(\002\022\024\n\014object"
  "_speed\030\005 \001(\002\"-\n\tLightType\022\r\n\tCAR_LIGHT\020\000"
  "\022\021\n\rTRAFFIC_LIGHT\020\001\"Q\n\014CarLightType\022\r\n\tT"
  "URN_LEFT\020\000\022\016\n\nTURN_RIGHT\020\001\022\010\n\004STOP\020\002\022\n\n\006"
  "URGENT\020\003\022\014\n\010NO_LIGHT\020\004\"\231\002\n\020TrafficLightT"
  "ype\022\017\n\013RED_FORWARD\020\000\022\014\n\010RED_LEFT\020\001\022\r\n\tRE"
  "D_RIGHT\020\002\022\022\n\016YELLOW_FORWARD\020\003\022\017\n\013YELLOW_"
  "LEFT\020\004\022\020\n\014YELLOW_RIGHT\020\005\022\021\n\rGREEN_FORWAR"
  "D\020\006\022\016\n\nGREEN_LEFT\020\007\022\017\n\013GREEN_RIGHT\020\010\022\021\n\r"
  "BLACK_FORWARD\020\t\022\016\n\nBLACK_LEFT\020\n\022\017\n\013BLACK"
  "_RIGHT\020\013\022\023\n\017UNKNOWN_FORWARD\020\014\022\020\n\014UNKNOWN"
  "_LEFT\020\r\022\021\n\rUNKNOWN_RIGHT\020\016\"Y\n\007Request\022\022\n"
  "\nvehicle_id\030\001 \002(\003\022\021\n\ttimestamp\030\002 \001(\005\022\'\n\n"
  "perception\030\003 \001(\0132\023.zzy.car.Perception\"\364\001"
  "\n\010Response\022*\n\007command\030\001 \002(\0132\031.zzy.car.Re"
  "sponse.Command\022\021\n\ttimestamp\030\002 \001(\r\022\022\n\nveh"
  "icle_id\030\003 \001(\003\032_\n\007Command\022(\n\006action\030\001 \001(\016"
  "2\030.zzy.car.Response.Action\022\024\n\014target_spe"
  "ed\030\002 \001(\002\022\024\n\014acceleration\030\003 \001(\001\"4\n\006Action"
  "\022\r\n\tNO_ACTION\020\000\022\014\n\010SPEED_UP\020\001\022\r\n\tSLOW_DO"
  "WN\020\0022;\n\nCarService\022-\n\006action\022\020.zzy.car.R"
  "equest\032\021.zzy.car.Response"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_light_2eproto = {
  false, InitDefaults_light_2eproto, 
  descriptor_table_protodef_light_2eproto,
  "light.proto", &assign_descriptors_table_light_2eproto, 1065,
};

void AddDescriptors_light_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_light_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_light_2eproto = []() { AddDescriptors_light_2eproto(); return true; }();
namespace zzy {
namespace car {
const ::google::protobuf::EnumDescriptor* Perception_LightType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_light_2eproto);
  return file_level_enum_descriptors_light_2eproto[0];
}
bool Perception_LightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Perception_LightType Perception::CAR_LIGHT;
const Perception_LightType Perception::TRAFFIC_LIGHT;
const Perception_LightType Perception::LightType_MIN;
const Perception_LightType Perception::LightType_MAX;
const int Perception::LightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Perception_CarLightType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_light_2eproto);
  return file_level_enum_descriptors_light_2eproto[1];
}
bool Perception_CarLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Perception_CarLightType Perception::TURN_LEFT;
const Perception_CarLightType Perception::TURN_RIGHT;
const Perception_CarLightType Perception::STOP;
const Perception_CarLightType Perception::URGENT;
const Perception_CarLightType Perception::NO_LIGHT;
const Perception_CarLightType Perception::CarLightType_MIN;
const Perception_CarLightType Perception::CarLightType_MAX;
const int Perception::CarLightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Perception_TrafficLightType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_light_2eproto);
  return file_level_enum_descriptors_light_2eproto[2];
}
bool Perception_TrafficLightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Perception_TrafficLightType Perception::RED_FORWARD;
const Perception_TrafficLightType Perception::RED_LEFT;
const Perception_TrafficLightType Perception::RED_RIGHT;
const Perception_TrafficLightType Perception::YELLOW_FORWARD;
const Perception_TrafficLightType Perception::YELLOW_LEFT;
const Perception_TrafficLightType Perception::YELLOW_RIGHT;
const Perception_TrafficLightType Perception::GREEN_FORWARD;
const Perception_TrafficLightType Perception::GREEN_LEFT;
const Perception_TrafficLightType Perception::GREEN_RIGHT;
const Perception_TrafficLightType Perception::BLACK_FORWARD;
const Perception_TrafficLightType Perception::BLACK_LEFT;
const Perception_TrafficLightType Perception::BLACK_RIGHT;
const Perception_TrafficLightType Perception::UNKNOWN_FORWARD;
const Perception_TrafficLightType Perception::UNKNOWN_LEFT;
const Perception_TrafficLightType Perception::UNKNOWN_RIGHT;
const Perception_TrafficLightType Perception::TrafficLightType_MIN;
const Perception_TrafficLightType Perception::TrafficLightType_MAX;
const int Perception::TrafficLightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Response_Action_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_light_2eproto);
  return file_level_enum_descriptors_light_2eproto[3];
}
bool Response_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Response_Action Response::NO_ACTION;
const Response_Action Response::SPEED_UP;
const Response_Action Response::SLOW_DOWN;
const Response_Action Response::Action_MIN;
const Response_Action Response::Action_MAX;
const int Response::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Perception::InitAsDefaultInstance() {
}
class Perception::HasBitSetters {
 public:
  static void set_has_light_type(Perception* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_car_light_type(Perception* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_traffic_light_type(Perception* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_distance(Perception* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_object_speed(Perception* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Perception::kLightTypeFieldNumber;
const int Perception::kCarLightTypeFieldNumber;
const int Perception::kTrafficLightTypeFieldNumber;
const int Perception::kDistanceFieldNumber;
const int Perception::kObjectSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Perception::Perception()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zzy.car.Perception)
}
Perception::Perception(const Perception& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&light_type_, &from.light_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&object_speed_) -
    reinterpret_cast<char*>(&light_type_)) + sizeof(object_speed_));
  // @@protoc_insertion_point(copy_constructor:zzy.car.Perception)
}

void Perception::SharedCtor() {
  ::memset(&light_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&object_speed_) -
      reinterpret_cast<char*>(&light_type_)) + sizeof(object_speed_));
}

Perception::~Perception() {
  // @@protoc_insertion_point(destructor:zzy.car.Perception)
  SharedDtor();
}

void Perception::SharedDtor() {
}

void Perception::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Perception& Perception::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Perception_light_2eproto.base);
  return *internal_default_instance();
}


void Perception::Clear() {
// @@protoc_insertion_point(message_clear_start:zzy.car.Perception)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&light_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&object_speed_) -
        reinterpret_cast<char*>(&light_type_)) + sizeof(object_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Perception::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Perception*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .zzy.car.Perception.LightType light_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::zzy::car::Perception_LightType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_light_type(static_cast<::zzy::car::Perception_LightType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .zzy.car.Perception.CarLightType car_light_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::zzy::car::Perception_CarLightType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_car_light_type(static_cast<::zzy::car::Perception_CarLightType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::zzy::car::Perception_TrafficLightType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_traffic_light_type(static_cast<::zzy::car::Perception_TrafficLightType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float distance = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_distance(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float object_speed = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_object_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Perception::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zzy.car.Perception)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zzy.car.Perception.LightType light_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zzy::car::Perception_LightType_IsValid(value)) {
            set_light_type(static_cast< ::zzy::car::Perception_LightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zzy.car.Perception.CarLightType car_light_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zzy::car::Perception_CarLightType_IsValid(value)) {
            set_car_light_type(static_cast< ::zzy::car::Perception_CarLightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zzy::car::Perception_TrafficLightType_IsValid(value)) {
            set_traffic_light_type(static_cast< ::zzy::car::Perception_TrafficLightType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_distance(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float object_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_object_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &object_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zzy.car.Perception)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zzy.car.Perception)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Perception::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zzy.car.Perception)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zzy.car.Perception.LightType light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->light_type(), output);
  }

  // optional .zzy.car.Perception.CarLightType car_light_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->car_light_type(), output);
  }

  // optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->traffic_light_type(), output);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->distance(), output);
  }

  // optional float object_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->object_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zzy.car.Perception)
}

::google::protobuf::uint8* Perception::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zzy.car.Perception)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zzy.car.Perception.LightType light_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->light_type(), target);
  }

  // optional .zzy.car.Perception.CarLightType car_light_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->car_light_type(), target);
  }

  // optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->traffic_light_type(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->distance(), target);
  }

  // optional float object_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->object_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zzy.car.Perception)
  return target;
}

size_t Perception::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zzy.car.Perception)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .zzy.car.Perception.LightType light_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->light_type());
    }

    // optional .zzy.car.Perception.CarLightType car_light_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->car_light_type());
    }

    // optional .zzy.car.Perception.TrafficLightType traffic_light_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->traffic_light_type());
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float object_speed = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Perception::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zzy.car.Perception)
  GOOGLE_DCHECK_NE(&from, this);
  const Perception* source =
      ::google::protobuf::DynamicCastToGenerated<Perception>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zzy.car.Perception)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zzy.car.Perception)
    MergeFrom(*source);
  }
}

void Perception::MergeFrom(const Perception& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zzy.car.Perception)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      light_type_ = from.light_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      car_light_type_ = from.car_light_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      traffic_light_type_ = from.traffic_light_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000010u) {
      object_speed_ = from.object_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Perception::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zzy.car.Perception)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Perception::CopyFrom(const Perception& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zzy.car.Perception)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perception::IsInitialized() const {
  return true;
}

void Perception::Swap(Perception* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Perception::InternalSwap(Perception* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(light_type_, other->light_type_);
  swap(car_light_type_, other->car_light_type_);
  swap(traffic_light_type_, other->traffic_light_type_);
  swap(distance_, other->distance_);
  swap(object_speed_, other->object_speed_);
}

::google::protobuf::Metadata Perception::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_light_2eproto);
  return ::file_level_metadata_light_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::zzy::car::_Request_default_instance_._instance.get_mutable()->perception_ = const_cast< ::zzy::car::Perception*>(
      ::zzy::car::Perception::internal_default_instance());
}
class Request::HasBitSetters {
 public:
  static void set_has_vehicle_id(Request* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(Request* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::zzy::car::Perception& perception(const Request* msg);
  static void set_has_perception(Request* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::zzy::car::Perception&
Request::HasBitSetters::perception(const Request* msg) {
  return *msg->perception_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kVehicleIdFieldNumber;
const int Request::kTimestampFieldNumber;
const int Request::kPerceptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zzy.car.Request)
}
Request::Request(const Request& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_perception()) {
    perception_ = new ::zzy::car::Perception(*from.perception_);
  } else {
    perception_ = nullptr;
  }
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:zzy.car.Request)
}

void Request::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Request_light_2eproto.base);
  ::memset(&perception_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&perception_)) + sizeof(timestamp_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:zzy.car.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != internal_default_instance()) delete perception_;
}

void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Request_light_2eproto.base);
  return *internal_default_instance();
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:zzy.car.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(perception_ != nullptr);
    perception_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&vehicle_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&vehicle_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Request::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Request*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required int64 vehicle_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_vehicle_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .zzy.car.Perception perception = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::zzy::car::Perception::_InternalParse;
        object = msg->mutable_perception();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zzy.car.Request)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 vehicle_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_vehicle_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zzy.car.Perception perception = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_perception()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zzy.car.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zzy.car.Request)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zzy.car.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 vehicle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->vehicle_id(), output);
  }

  // optional int32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // optional .zzy.car.Perception perception = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::perception(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zzy.car.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zzy.car.Request)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 vehicle_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->vehicle_id(), target);
  }

  // optional int32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // optional .zzy.car.Perception perception = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::perception(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zzy.car.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zzy.car.Request)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 vehicle_id = 1;
  if (has_vehicle_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->vehicle_id());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .zzy.car.Perception perception = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *perception_);
  }

  // optional int32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zzy.car.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::google::protobuf::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zzy.car.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zzy.car.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zzy.car.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_perception()->::zzy::car::Perception::MergeFrom(from.perception());
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_id_ = from.vehicle_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zzy.car.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zzy.car.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(perception_, other->perception_);
  swap(vehicle_id_, other->vehicle_id_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_light_2eproto);
  return ::file_level_metadata_light_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Response_Command::InitAsDefaultInstance() {
}
class Response_Command::HasBitSetters {
 public:
  static void set_has_action(Response_Command* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_target_speed(Response_Command* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_acceleration(Response_Command* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response_Command::kActionFieldNumber;
const int Response_Command::kTargetSpeedFieldNumber;
const int Response_Command::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response_Command::Response_Command()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zzy.car.Response.Command)
}
Response_Command::Response_Command(const Response_Command& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&acceleration_) -
    reinterpret_cast<char*>(&action_)) + sizeof(acceleration_));
  // @@protoc_insertion_point(copy_constructor:zzy.car.Response.Command)
}

void Response_Command::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acceleration_) -
      reinterpret_cast<char*>(&action_)) + sizeof(acceleration_));
}

Response_Command::~Response_Command() {
  // @@protoc_insertion_point(destructor:zzy.car.Response.Command)
  SharedDtor();
}

void Response_Command::SharedDtor() {
}

void Response_Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response_Command& Response_Command::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Response_Command_light_2eproto.base);
  return *internal_default_instance();
}


void Response_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:zzy.car.Response.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&acceleration_) -
        reinterpret_cast<char*>(&action_)) + sizeof(acceleration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response_Command::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Response_Command*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .zzy.car.Response.Action action = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::zzy::car::Response_Action_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_action(static_cast<::zzy::car::Response_Action>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float target_speed = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_target_speed(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional double acceleration = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_acceleration(::google::protobuf::io::UnalignedLoad<double>(ptr));
        ptr += sizeof(double);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zzy.car.Response.Command)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zzy.car.Response.Action action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zzy::car::Response_Action_IsValid(value)) {
            set_action(static_cast< ::zzy::car::Response_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float target_speed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_target_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &target_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double acceleration = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zzy.car.Response.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zzy.car.Response.Command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zzy.car.Response.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zzy.car.Response.Action action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional float target_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->target_speed(), output);
  }

  // optional double acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->acceleration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zzy.car.Response.Command)
}

::google::protobuf::uint8* Response_Command::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zzy.car.Response.Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zzy.car.Response.Action action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional float target_speed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->target_speed(), target);
  }

  // optional double acceleration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->acceleration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zzy.car.Response.Command)
  return target;
}

size_t Response_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zzy.car.Response.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .zzy.car.Response.Action action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional float target_speed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional double acceleration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response_Command::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zzy.car.Response.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Response_Command* source =
      ::google::protobuf::DynamicCastToGenerated<Response_Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zzy.car.Response.Command)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zzy.car.Response.Command)
    MergeFrom(*source);
  }
}

void Response_Command::MergeFrom(const Response_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zzy.car.Response.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000002u) {
      target_speed_ = from.target_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      acceleration_ = from.acceleration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response_Command::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zzy.car.Response.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response_Command::CopyFrom(const Response_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zzy.car.Response.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response_Command::IsInitialized() const {
  return true;
}

void Response_Command::Swap(Response_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response_Command::InternalSwap(Response_Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(action_, other->action_);
  swap(target_speed_, other->target_speed_);
  swap(acceleration_, other->acceleration_);
}

::google::protobuf::Metadata Response_Command::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_light_2eproto);
  return ::file_level_metadata_light_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::zzy::car::_Response_default_instance_._instance.get_mutable()->command_ = const_cast< ::zzy::car::Response_Command*>(
      ::zzy::car::Response_Command::internal_default_instance());
}
class Response::HasBitSetters {
 public:
  static const ::zzy::car::Response_Command& command(const Response* msg);
  static void set_has_command(Response* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_timestamp(Response* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_vehicle_id(Response* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::zzy::car::Response_Command&
Response::HasBitSetters::command(const Response* msg) {
  return *msg->command_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCommandFieldNumber;
const int Response::kTimestampFieldNumber;
const int Response::kVehicleIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:zzy.car.Response)
}
Response::Response(const Response& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_command()) {
    command_ = new ::zzy::car::Response_Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  ::memcpy(&vehicle_id_, &from.vehicle_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&vehicle_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:zzy.car.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Response_light_2eproto.base);
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&command_)) + sizeof(timestamp_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:zzy.car.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != internal_default_instance()) delete command_;
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Response_light_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:zzy.car.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(command_ != nullptr);
    command_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&vehicle_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&vehicle_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Response::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Response*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .zzy.car.Response.Command command = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::zzy::car::Response_Command::_InternalParse;
        object = msg->mutable_command();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 vehicle_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_vehicle_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:zzy.car.Response)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .zzy.car.Response.Command command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 vehicle_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_vehicle_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vehicle_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zzy.car.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zzy.car.Response)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zzy.car.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zzy.car.Response.Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::command(this), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional int64 vehicle_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->vehicle_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:zzy.car.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:zzy.car.Response)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .zzy.car.Response.Command command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::command(this), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional int64 vehicle_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->vehicle_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:zzy.car.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zzy.car.Response)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .zzy.car.Response.Command command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *command_);
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional int64 vehicle_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vehicle_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:zzy.car.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::google::protobuf::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:zzy.car.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:zzy.car.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zzy.car.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_command()->::zzy::car::Response_Command::MergeFrom(from.command());
    }
    if (cached_has_bits & 0x00000002u) {
      vehicle_id_ = from.vehicle_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:zzy.car.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zzy.car.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_, other->command_);
  swap(vehicle_id_, other->vehicle_id_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_light_2eproto);
  return ::file_level_metadata_light_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace car
}  // namespace zzy
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::zzy::car::Perception* Arena::CreateMaybeMessage< ::zzy::car::Perception >(Arena* arena) {
  return Arena::CreateInternal< ::zzy::car::Perception >(arena);
}
template<> PROTOBUF_NOINLINE ::zzy::car::Request* Arena::CreateMaybeMessage< ::zzy::car::Request >(Arena* arena) {
  return Arena::CreateInternal< ::zzy::car::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::zzy::car::Response_Command* Arena::CreateMaybeMessage< ::zzy::car::Response_Command >(Arena* arena) {
  return Arena::CreateInternal< ::zzy::car::Response_Command >(arena);
}
template<> PROTOBUF_NOINLINE ::zzy::car::Response* Arena::CreateMaybeMessage< ::zzy::car::Response >(Arena* arena) {
  return Arena::CreateInternal< ::zzy::car::Response >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
